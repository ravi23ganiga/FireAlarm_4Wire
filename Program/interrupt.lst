C51 COMPILER V8.05a   INTERRUPT                                                            09/23/2013 22:14:28 PAGE 1   


C51 COMPILER V8.05a, COMPILATION OF MODULE INTERRUPT
OBJECT MODULE PLACED IN interrupt.obj
COMPILER INVOKED BY: D:\Keil\C51\BIN\C51.EXE board\src\interrupt.c BROWSE INCDIR(.\include) DEBUG OBJECTEXTEND PRINT(.\i
                    -nterrupt.lst) OBJECT(interrupt.obj)

line level    source

   1          #include "global.h"
   2          
   3          void InterruptInit()
   4          {
   5   1              //Basic interrupt configuration 
   6   1              IE              = 0x00;
   7   1              //Timer interrupt configuration
   8   1              TMOD    = 0x21;
   9   1              //Timer0 as 1msec configuration
  10   1              TR0     = FALSE;
  11   1              TH0     = 0xFC;
  12   1              TL0     = 0x66;
  13   1              //Timer 1 as 9600 baud rate generator
  14   1              TR1     = FALSE;
  15   1              TH1     = 0xFD;
  16   1              TL1     = 0xFD; 
  17   1              IP = 0x1A;
  18   1              IE = 0x92;                 
  19   1      } 
  20          
  21          void msecInterruptStart()
  22          {
  23   1              TR0 = TRUE;
  24   1      }
  25          
  26          void SerialInterrupt() interrupt 4
  27          {
  28   1              UC ucmData;
  29   1              if(TI EQ TRUE)
  30   1              {
  31   2                      //Transmission Interrupt 
  32   2                      if(System.Serial.ucmTxLength NEQ 0)
  33   2                      {
  34   3                              ucmData = VALUE_AT_ADDRESS(System.Serial.ucpDataPtr);
  35   3                              System.Serial.ucpDataPtr++;
  36   3                              System.Serial.ucmTxLength--;
  37   3                              SBUF = ucmData; 
  38   3                      }
  39   2                      else
  40   2                      {
  41   3                              System.Serial.enTxComplete = COMPLETE;
  42   3                              //if(System.Serial.fnTxFunc NEQ NULL)
  43   3                              //{
  44   3                              //      System.Serial.fnTxFunc(System.Serial.vTxData);
  45   3                              //}
  46   3                      }
  47   2                      TI = FALSE;
  48   2              }
  49   1              else
  50   1              {
  51   2                      //Receiver Interrupt
  52   2                      if( ( System.Serial.enRxStatus EQ RX_MONITORING ) OR ( System.Serial.enRxStatus EQ RX_STARTED ) )
  53   2                      {
  54   3                              System.Serial.usmRxTimeout = RECEPTION_TIMEOUT;
C51 COMPILER V8.05a   INTERRUPT                                                            09/23/2013 22:14:28 PAGE 2   

  55   3                              System.Serial.enRxStatus = RX_STARTED;
  56   3                              
  57   3                              if(System.Serial.ucmRxNdx NEQ (System.Serial.ucmRxLength - 1))
  58   3                              {
  59   4                                      System.Serial.ucpRxBuff[System.Serial.ucmRxNdx] = SBUF;
  60   4                                      System.Serial.ucmRxNdx++;
  61   4                              }
  62   3                      }
  63   2                      RI = FALSE;
  64   2              }
  65   1      }
  66          
  67          //1 msec interrupt 
  68          void TimerInterrupt() interrupt 1
  69          {
  70   1              TR0 = FALSE;
  71   1              //1msec timer interrupt
  72   1       
  73   1              if(System.AppStruct.usmDelay GT 0)
  74   1              {
  75   2                      System.AppStruct.usmDelay--;
  76   2              }
  77   1              //----------------------
  78   1               //Serial Reception Status
  79   1               if(System.Serial.enRxStatus EQ RX_STARTED)
  80   1               {
  81   2                         if(System.Serial.usmRxTimeout NEQ 0)
  82   2                         {
  83   3                                      System.Serial.usmRxTimeout--;
  84   3                                      if(System.Serial.usmRxTimeout EQ 0)
  85   3                                      {
  86   4                                              System.Serial.enRxStatus = RX_COMPLETED;
  87   4                                              REN = FALSE;
  88   4                                              //call routine
  89   4                              //              if(System.Serial.fnRxFunc NEQ NULL)
  90   4                              //              {
  91   4                              //                      System.Serial.fnRxFunc(System.Serial.vRxData,RX_COMPLETED);
  92   4                              //              }
  93   4      //                                      if(System.Serial.bitRxContinuous EQ TRUE)
  94   4      //                                      {
  95   4                              //                      REN = TRUE;
  96   4      //                                      }
  97   4                                      }
  98   3                         }
  99   2                }
 100   1      
 101   1                if(System.Serial.enRxStatus EQ RX_MONITORING)
 102   1                {
 103   2                      if(System.Serial.usmRxWaitTimeout NEQ 0)
 104   2                      {
 105   3                              System.Serial.usmRxWaitTimeout--;
 106   3                              if(System.Serial.usmRxWaitTimeout EQ 0)
 107   3                              {
 108   4                                      System.Serial.enRxStatus = RX_TIMEOUT;
 109   4                                      REN = FALSE;
 110   4                                      //if(System.Serial.fnRxFunc NEQ NULL)
 111   4                                      //{
 112   4                                      //      System.Serial.fnRxFunc(System.Serial.vRxData,RX_TIMEOUT);
 113   4                                      //}
 114   4      //                              if(System.Serial.bitRxContinuous EQ TRUE)
 115   4      //                              {
 116   4      //                                      REN = TRUE;
C51 COMPILER V8.05a   INTERRUPT                                                            09/23/2013 22:14:28 PAGE 3   

 117   4      //                              }
 118   4                              }
 119   3                      }
 120   2                }
 121   1               //-----------------------
 122   1              //-----------------------
 123   1              TH0 = 0xFC;
 124   1              TL0 = 0x66;
 125   1              TR0 = TRUE;
 126   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    259    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
